dataset: willbeautomaticallyupdatedbyStep3code
num_joints: willbeautomaticallyupdatedbyStep3code
all_joints: willbeautomaticallyupdatedbyStep3code
all_joints_names: willbeautomaticallyupdatedbyStep3code

# Hyperparameters below worked well for our tasks:

# all locations within this distance threshold are considered
# positive training samples for detector
pos_dist_thresh: 17

# all images in the dataset will be rescaled by the following
# scaling factor to be processed by the CNN. You can select the
# optimal scale by cross-validation
global_scale: 0.8
# During training an image will be randomly scaled within the
# range [scale_jitter_lo; scale_jitter_up] to augment training data,
scale_jitter_lo: 0.5
scale_jitter_up: 1.5
# Randomly flips an image horizontally to augment training data
mirror: false

# Type of the CNN to use, currently resnet_101 and resnet_50
# are supported
net_type: resnet_50
init_weights: ../../pretrained/resnet_v1_50.ckpt
# init_weights: ./snapshot-5000


# Location refinement parameters (check https://arxiv.org/abs/1511.06645)
location_refinement: true
locref_huber_loss: true
locref_loss_weight: 0.05
locref_stdev: 7.2801

# Enabling this adds additional loss layer in the middle of the ConvNet,
# which helps accuracy.
intermediate_supervision: false
intermediate_supervision_layer: 12

# all images larger with size
# width * height > max_input_size*max_input_size are not used in training.
# Prevents training from crashing with out of memory exception for very
# large images.
max_input_size: 1000

# Learning rate schedule for the SGD optimiser. 
multi_step:
- [0.005, 10000]
- [0.02, 430000]
- [0.002, 730000]
- [0.001, 1030000]

# How often display loss
display_iters: 1000
# How often to save training snapshot
save_iters: 5000


